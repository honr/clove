;; -*- Mode: Clojure -*-

;; apparently BSD's execve and Linux's execve are different, and the
;; body of this script is not being executed in BSD.

(ns clove.clojure
  (:require [clojure.main])
  (:import [clove CloveSecurityManager CloveExitException CloveNet]))

(in-ns 'clojure.core)
(def ^:dynamic *env* nil)
(def ^:dynamic *cwd* nil)
(def ^:dynamic *home* nil)
(def ^:dynamic *username* nil)
;; (intern 'clojure.core '*env* nil)
;; (intern 'clojure.core '*cwd* nil)
;; (intern 'clojure.core '*home* nil)
;; (intern 'clojure.core '*username* nil)
(in-ns 'user)
(refer 'clojure.core)
(in-ns 'clove.clojure)

;; (set! *warn-on-reflection* true)

(def sockpath (System/getenv "CLOVESOCKET"))

(def sock (atom nil))

(def ^{:private true} old-security-manager (System/getSecurityManager))

(defn- initialize []
  (System/setSecurityManager
   (CloveSecurityManager.
    (System/getSecurityManager)))
  (reset! sock (CloveNet/sock_addr_bind 1 (.getBytes sockpath) 1))
  ;; let the broker know we are ready. broker uses this message to
  ;; synchronize, so it is important that we send a message.
  (println "Ready."))

(defn- terminate [n]
  (when @sock
    (CloveNet/close @sock)
    (.println *err* "Clove/Clojure: closing.")
    (System/setSecurityManager old-security-manager)
    (.delete (java.io.File. sockpath))
    (reset! sock nil))
  (System/exit n))

(def message-length 8192)

;; TODO: See if there are any conceivable security implications for
;;       the following hack:
(def ^{:private true} FileDescriptor-fd-field
  (.getDeclaredField java.io.FileDescriptor "fd"))
(.setAccessible FileDescriptor-fd-field true)

;; (printlnfd (str (.fd (java.io.FileDescriptor.))))

(defn- fd-get-num [#^java.io.FileDescriptor fd]
  (.getInt FileDescriptor-fd-field fd))

(defn- obtain-remote-fds [sock]
  (when-let [remote-fds-ba (CloveNet/unix_recv_fds sock)]
    (let [[fd-in fd-out fd-err] (seq remote-fds-ba)]
     {:in  fd-in
      :out fd-out
      :err fd-err})))

(defn- read-ab-string-vector [#^java.nio.ByteBuffer bb]
  ;; TODO: watch out for unicode!
    (let [bb-dup (.duplicate bb)]
     (loop [v []]
       (if (not (.hasRemaining bb))
	 v
	 (do
	   (while (not (= (.get bb) 0)))
	   (let [len (- (.position bb) (.position bb-dup) 1)]
	     (if (zero? len)
	       v
	       (recur (conj v (let [ba (make-array Byte/TYPE len)]
				(.get bb-dup ba 0 len)
				(.get bb-dup)
				(.substring (String. #^bytes ba) 1)))))))))))

(defn- obtain-remote-context [sock]
  (if-let [data (CloveNet/read sock message-length)]
    (let [data (java.nio.ByteBuffer/wrap data)]
      [(read-ab-string-vector data)
       (into {} (map (fn [#^String s]
		       (vec (take 2 (conj (vec (.split s "=" 2)) nil))))
		     (read-ab-string-vector data)))])))

;; TODO: terminate thread when certain errors occur.
(defn- process-thread [sock]
  (try
    (if-let [fds (obtain-remote-fds sock)]
      (let [[args env] (obtain-remote-context sock)]

	(cond (= (first args) "-q") (terminate 0)
	      (= (first args) "--ping") (println "Yes darling; What is it?")
	      :else
	      (do
		(.println *err* (apply format "[%d %d %d] open"
				       (map fd-get-num (vals fds))))
	      
		(binding [clojure.core/*env* env
			  clojure.core/*cwd* (get env "PWD")
			  clojure.core/*home* (get env "HOME")
			  clojure.core/*username* (get env "USER")
			  *out* (java.io.OutputStreamWriter.
				 (java.io.FileOutputStream. (fds :out)))
			  *err* (java.io.PrintWriter.
				 (java.io.FileOutputStream. (fds :err))
				 true)	; auto flush
			  *in* (clojure.lang.LineNumberingPushbackReader.
				(java.io.InputStreamReader.
				 (java.io.FileInputStream. (fds :in))))]
		  (try
		    (let [first-arg (first args)]
		      (if (and first-arg
			       (not (.startsWith first-arg "-"))
			       (not (.startsWith first-arg "/")))
			;; if the first arg is a path, get the absolute path with regards to cwd.
			(apply clojure.main/main (.getCanonicalPath
						  (java.io.File. clojure.core/*cwd* first-arg))
			       (rest args))
			(apply clojure.main/main args)))
		       ;; (catch java.io.IOException e nil)
		       (catch CloveExitException e nil)
		       (catch clojure.lang.Compiler$CompilerException e
			 (.printStackTrace e *err*))
		       (catch Exception e
			 (.printStackTrace e *err*))))

		(.println *err* (apply format "[%d %d %d] close"
				       (map fd-get-num (vals fds))))))

	;; BUG: Somehow, when used in a pipe the termination of the pipe is
	;; not communicated back to the client.

	;; Closing FDs apparently interferes with java's garbage
	;; collector. If the next lines are left uncommented, if you
	;; (issue (System/gc) on the second time you open a connection)
	;; it the live FDs will get garbage collected. There should be a
	;; way to mark new FDs as open.
      
	;; (libc/fsync (:num (fds :out)))
	;; (libc/close (:num (fds :out)))
	;; (libc/fsync (:num (fds :err)))
	;; (libc/close (:num (fds :err)))
	;; ;; TODO: what to do with this:
	;; (libc/close (:num (fds :in)))
	;; (libc/shutdown sock)
	;; (CloveNet/close (fd-get-num (:out fds)))
	(CloveNet/close sock)
	(System/gc)  ;; darn! We should never need to call System/gc.
	;; Instead, we should find a way to politely ask java to
	;; garbage collect the file descriptors.
	)
      (.println *err* "Unable to obtain remote fds."))
    (catch Exception e nil
	   (.printStackTrace e *err*))))

(defn- main []
  (initialize)
  
  ;; main loop
  (while (and @sock (pos? @sock))
    (let [sock-a (CloveNet/accept @sock)]
      (when (pos? sock-a)
	(.start (new Thread (fn [] (process-thread sock-a)))))))
  
  (terminate 0))

(main)
